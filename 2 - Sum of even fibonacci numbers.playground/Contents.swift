/*
 Problem
 --------------------------------------------------------------------------------------------------------------------------------------------
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 --------------------------------------------------------------------------------------------------------------------------------------------
 */
import UIKit

// Prints fib sequence and returns sum of even fibs
func fibIterative(terms whichTerm: Int) -> Int {
    var fibs: [Int] = [1,1]

    for i in 2..<whichTerm {
        fibs.append(fibs[i-1] + fibs[i-2])
    }

    print(fibs)

    return sumOfEvenFibIterative(fibSequence: fibs)
}

// Returns the sum of even fib. in a given sequence
func sumOfEvenFibIterative(fibSequence: [Int]) -> Int {
    var sum = 0

    for i in 0..<fibSequence.count {
        if fibSequence[i] % 2 == 0 {
            sum += fibSequence[i]
        }
    }

    return sum
}

fibIterative(terms: 33)



//// Returns a sum of even using recursion
//func sumOfEvenFibRecursive(howMany: Int) -> Int{
//    var sum = 0
//
//    for i in 0..<howMany {
//        if fibRecursive(terms: i) % 2 == 0 {
//            sum += fibRecursive(terms: i)
//        }
//    }
//
//    return sum
//}
//
//// Returns a specific fib. # using recursion
//func fibRecursive(terms whichTerm: Int) -> Int {
//    // If number of terms is less than 2, return fib values 1,1.
//    // Problem - O(2^n)
//    if whichTerm <= 2 {
//        return 1
//    } else {
//        return fibRecursive(terms: whichTerm - 1) + fibRecursive(terms: whichTerm - 2)
//    }
//}
//
//sumOfEvenFibRecursive(howMany: 30)
